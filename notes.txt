11/13/2014
==========

- Constructor subpopulation must take reference to an environment
- Class subpopulation must have method to set the environment. Update: Such a method is not necessary, because the environment id EI is a public variable of class subpopulation
- All methods that call the subpopulation constructor must pass the id of an environment to the constructor. Affected methods: population::add_subpopulatio(), population::execute_event(), initialize_from_file()
- A subpopulation can only be constructed and assigned an environment if the respective environment has already been defined. This must be ensured by the programmer.

11/15/2014
==========

- Started change from passing a reference to the map of environments to subpopulation::W() and subpopulation::update_fitness(), to passing only the reference to the correct single environment. TODO: Go on with this; add const where environment references are passed, because environments must not be changed. [DONE]

11/17/2014
==========

- Started working on output of subpopulation-specific prevalences. First, adjust polymorphism::print() [DONE], then polymorphism::print_noi() [DONE]. Then work on population::print_all() [two versions, DONE], population::print_sample() [DONE], population::print_sample_ms() [DONE], population::add_mut() [DONE], population::track_mutations()[DONE], population::find_mut() [called by population::print_all() and population::print_sample(), DONE]
- REMARK: The method polymorphism::print_noi() is used to print subpopulation-specific prevalences, yet in its current implementation, it gives dominance and selection coefficients valid for the reference environment, not for the respective subpopulation. This could be changed later, if needed.
- Adjusting population::track_mutations() to account for changes in class polymorphism [DONE]
- Improved formatting of population::remove_fixed(), polymorphic(), and fixed() [DONE]. REMARK: I have not fully checked these methods, but merely focussed on improving the formatting (indentation)
- Work on chromosome::draw_new_mut() [DONE], population::crossover_mutation() [DONE, with major revisions], and population::introduce_mutation() [DONE]. For the latter, adjust to the new scheme of replacing previously existing non-neutral mutations at a given position x.
- TODO: Handle occurrence of multiple *neutral* mutations at the very same position in a given haploid genome. This should be disallowed; preexisting mutations should be overridden. Concerned methods are population::draw_new_mut() [DONE] and population::introduce_mutation() [DONE];
- TODO: Do not forget to add newly introduced non-neutral mutations to chromosome::seg_nonneut_mut() after introducing them; See point below for an update
- I must make sure that if a segregating non-neutral mutation does not make it into a child population before populations are ‘swapped’, that non-neutral mutation is removed from chromosome::seg_nonneutr_mut. Ideally, the method population::remove_fixed() can be extended such as to perform this check. There should be a globally (or widely) accessible record of parental non-neutral mutations that do not make it into the entire child population (i.e. the union of child subpopulations) every generation. The record simply needs to store physical positions at which a segregating non-neutral parental mutation failed to be transmitted to at least one child individual in the entire population. It might actually be better to have a vector accumulate physical positions at which a segregating non-neutral mutation was successfully transferred to at least one child. When all children are built, the complement of the set of positions in that vector with respect to the set of keys of seg_nonneutr_mut is the set of positions at which a segregating non-neutral mutation did not make it into the new entire population of children. TODO: Implement this.
- Current locations: 4685/2554*/487